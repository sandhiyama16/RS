import numpy as np
import matplotlib.pyplot as plt
from sklearn.linear_model import LinearRegression
from sklearn.preprocessing import PolynomialFeatures
from sklearn.metrics import mean_squared_error

# Generate synthetic data
np.random.seed(42)
X = np.random.rand(100, 1) * 10  # Features: Random numbers between 0 and 10
y = 2 * X + 3 + np.random.randn(100, 1) * 2  # Linear relationship with noise

# Split data into training and testing sets
X_train, X_test = X[:80], X[80:]
y_train, y_test = y[:80], y[80:]

# Linear Regression
linear_model = LinearRegression()
linear_model.fit(X_train, y_train)

# Polynomial Regression (degree=2)
poly_features = PolynomialFeatures(degree=2, include_bias=False)
X_poly_train = poly_features.fit_transform(X_train)
X_poly_test = poly_features.transform(X_test)

poly_model = LinearRegression()
poly_model.fit(X_poly_train, y_train)

# Predictions
y_pred_linear = linear_model.predict(X_test)
y_pred_poly = poly_model.predict(X_poly_test)

# Model Evaluation
mse_linear = mean_squared_error(y_test, y_pred_linear)
mse_poly = mean_squared_error(y_test, y_pred_poly)

print("Linear Regression MSE:", mse_linear)
print("Polynomial Regression MSE:", mse_poly)

# Visualization
plt.figure(figsize=(12, 6))

# Plot Linear Regression
plt.subplot(1, 2, 1)
plt.scatter(X, y, color='blue', alpha=0.5, label="Data")
plt.plot(X, linear_model.predict(X), color='red', label="Linear Fit")
plt.title("Linear Regression")
plt.xlabel("X")
plt.ylabel("y")
plt.legend()

# Plot Polynomial Regression
plt.subplot(1, 2, 2)
plt.scatter(X, y, color='blue', alpha=0.5, label="Data")
X_curve = np.linspace(0, 10, 100).reshape(-1, 1)
y_curve = poly_model.predict(poly_features.transform(X_curve))
plt.plot(X_curve, y_curve, color='red', label="Polynomial Fit")
plt.title("Polynomial Regression")
plt.xlabel("X")
plt.ylabel("y")
plt.legend()

plt.tight_layout()
plt.show()
